// Code generated by protoc-gen-box. DO NOT EDIT.
// source: diskqueue.proto

package diskqueue

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	tr "github.com/tddhit/box/transport"
	tropt "github.com/tddhit/box/transport/option"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import (
	context1 "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Command_Op int32

const (
	Command_PUSH    Command_Op = 0
	Command_ADVANCE Command_Op = 1
)

var Command_Op_name = map[int32]string{
	0: "PUSH",
	1: "ADVANCE",
}
var Command_Op_value = map[string]int32{
	"PUSH":    0,
	"ADVANCE": 1,
}

func (x Command_Op) String() string {
	return proto.EnumName(Command_Op_name, int32(x))
}
func (Command_Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{13, 0}
}

type Message struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	HashKey              []byte   `protobuf:"bytes,3,opt,name=hashKey,proto3" json:"hashKey,omitempty"`
	Timestamp            int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetHashKey() []byte {
	if m != nil {
		return m.HashKey
	}
	return nil
}

func (m *Message) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type PushRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	HashKey              []byte   `protobuf:"bytes,3,opt,name=hashKey,proto3" json:"hashKey,omitempty"`
	IgnoreFilter         bool     `protobuf:"varint,4,opt,name=ignoreFilter,proto3" json:"ignoreFilter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushRequest) Reset()         { *m = PushRequest{} }
func (m *PushRequest) String() string { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()    {}
func (*PushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{1}
}
func (m *PushRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushRequest.Unmarshal(m, b)
}
func (m *PushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushRequest.Marshal(b, m, deterministic)
}
func (dst *PushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRequest.Merge(dst, src)
}
func (m *PushRequest) XXX_Size() int {
	return xxx_messageInfo_PushRequest.Size(m)
}
func (m *PushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushRequest proto.InternalMessageInfo

func (m *PushRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PushRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PushRequest) GetHashKey() []byte {
	if m != nil {
		return m.HashKey
	}
	return nil
}

func (m *PushRequest) GetIgnoreFilter() bool {
	if m != nil {
		return m.IgnoreFilter
	}
	return false
}

type PushReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushReply) Reset()         { *m = PushReply{} }
func (m *PushReply) String() string { return proto.CompactTextString(m) }
func (*PushReply) ProtoMessage()    {}
func (*PushReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{2}
}
func (m *PushReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushReply.Unmarshal(m, b)
}
func (m *PushReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushReply.Marshal(b, m, deterministic)
}
func (dst *PushReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushReply.Merge(dst, src)
}
func (m *PushReply) XXX_Size() int {
	return xxx_messageInfo_PushReply.Size(m)
}
func (m *PushReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PushReply.DiscardUnknown(m)
}

var xxx_messageInfo_PushReply proto.InternalMessageInfo

type PopRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	NeedAck              bool     `protobuf:"varint,2,opt,name=needAck,proto3" json:"needAck,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PopRequest) Reset()         { *m = PopRequest{} }
func (m *PopRequest) String() string { return proto.CompactTextString(m) }
func (*PopRequest) ProtoMessage()    {}
func (*PopRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{3}
}
func (m *PopRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PopRequest.Unmarshal(m, b)
}
func (m *PopRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PopRequest.Marshal(b, m, deterministic)
}
func (dst *PopRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PopRequest.Merge(dst, src)
}
func (m *PopRequest) XXX_Size() int {
	return xxx_messageInfo_PopRequest.Size(m)
}
func (m *PopRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PopRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PopRequest proto.InternalMessageInfo

func (m *PopRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PopRequest) GetNeedAck() bool {
	if m != nil {
		return m.NeedAck
	}
	return false
}

type PopReply struct {
	Message              *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PopReply) Reset()         { *m = PopReply{} }
func (m *PopReply) String() string { return proto.CompactTextString(m) }
func (*PopReply) ProtoMessage()    {}
func (*PopReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{4}
}
func (m *PopReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PopReply.Unmarshal(m, b)
}
func (m *PopReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PopReply.Marshal(b, m, deterministic)
}
func (dst *PopReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PopReply.Merge(dst, src)
}
func (m *PopReply) XXX_Size() int {
	return xxx_messageInfo_PopReply.Size(m)
}
func (m *PopReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PopReply.DiscardUnknown(m)
}

var xxx_messageInfo_PopReply proto.InternalMessageInfo

func (m *PopReply) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type AckRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	MsgID                uint64   `protobuf:"varint,2,opt,name=msgID,proto3" json:"msgID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckRequest) Reset()         { *m = AckRequest{} }
func (m *AckRequest) String() string { return proto.CompactTextString(m) }
func (*AckRequest) ProtoMessage()    {}
func (*AckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{5}
}
func (m *AckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckRequest.Unmarshal(m, b)
}
func (m *AckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckRequest.Marshal(b, m, deterministic)
}
func (dst *AckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckRequest.Merge(dst, src)
}
func (m *AckRequest) XXX_Size() int {
	return xxx_messageInfo_AckRequest.Size(m)
}
func (m *AckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AckRequest proto.InternalMessageInfo

func (m *AckRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *AckRequest) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

type AckReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckReply) Reset()         { *m = AckReply{} }
func (m *AckReply) String() string { return proto.CompactTextString(m) }
func (*AckReply) ProtoMessage()    {}
func (*AckReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{6}
}
func (m *AckReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckReply.Unmarshal(m, b)
}
func (m *AckReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckReply.Marshal(b, m, deterministic)
}
func (dst *AckReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckReply.Merge(dst, src)
}
func (m *AckReply) XXX_Size() int {
	return xxx_messageInfo_AckReply.Size(m)
}
func (m *AckReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AckReply.DiscardUnknown(m)
}

var xxx_messageInfo_AckReply proto.InternalMessageInfo

type JoinRequest struct {
	RaftAddr             string   `protobuf:"bytes,1,opt,name=raftAddr,proto3" json:"raftAddr,omitempty"`
	NodeID               string   `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinRequest) Reset()         { *m = JoinRequest{} }
func (m *JoinRequest) String() string { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()    {}
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{7}
}
func (m *JoinRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinRequest.Unmarshal(m, b)
}
func (m *JoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinRequest.Marshal(b, m, deterministic)
}
func (dst *JoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRequest.Merge(dst, src)
}
func (m *JoinRequest) XXX_Size() int {
	return xxx_messageInfo_JoinRequest.Size(m)
}
func (m *JoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRequest proto.InternalMessageInfo

func (m *JoinRequest) GetRaftAddr() string {
	if m != nil {
		return m.RaftAddr
	}
	return ""
}

func (m *JoinRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type JoinReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinReply) Reset()         { *m = JoinReply{} }
func (m *JoinReply) String() string { return proto.CompactTextString(m) }
func (*JoinReply) ProtoMessage()    {}
func (*JoinReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{8}
}
func (m *JoinReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinReply.Unmarshal(m, b)
}
func (m *JoinReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinReply.Marshal(b, m, deterministic)
}
func (dst *JoinReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinReply.Merge(dst, src)
}
func (m *JoinReply) XXX_Size() int {
	return xxx_messageInfo_JoinReply.Size(m)
}
func (m *JoinReply) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinReply.DiscardUnknown(m)
}

var xxx_messageInfo_JoinReply proto.InternalMessageInfo

type LeaveRequest struct {
	NodeID               string   `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaveRequest) Reset()         { *m = LeaveRequest{} }
func (m *LeaveRequest) String() string { return proto.CompactTextString(m) }
func (*LeaveRequest) ProtoMessage()    {}
func (*LeaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{9}
}
func (m *LeaveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaveRequest.Unmarshal(m, b)
}
func (m *LeaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaveRequest.Marshal(b, m, deterministic)
}
func (dst *LeaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveRequest.Merge(dst, src)
}
func (m *LeaveRequest) XXX_Size() int {
	return xxx_messageInfo_LeaveRequest.Size(m)
}
func (m *LeaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveRequest proto.InternalMessageInfo

func (m *LeaveRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type LeaveReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaveReply) Reset()         { *m = LeaveReply{} }
func (m *LeaveReply) String() string { return proto.CompactTextString(m) }
func (*LeaveReply) ProtoMessage()    {}
func (*LeaveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{10}
}
func (m *LeaveReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaveReply.Unmarshal(m, b)
}
func (m *LeaveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaveReply.Marshal(b, m, deterministic)
}
func (dst *LeaveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveReply.Merge(dst, src)
}
func (m *LeaveReply) XXX_Size() int {
	return xxx_messageInfo_LeaveReply.Size(m)
}
func (m *LeaveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveReply.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveReply proto.InternalMessageInfo

type SnapshotRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotRequest) Reset()         { *m = SnapshotRequest{} }
func (m *SnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*SnapshotRequest) ProtoMessage()    {}
func (*SnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{11}
}
func (m *SnapshotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotRequest.Unmarshal(m, b)
}
func (m *SnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotRequest.Marshal(b, m, deterministic)
}
func (dst *SnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotRequest.Merge(dst, src)
}
func (m *SnapshotRequest) XXX_Size() int {
	return xxx_messageInfo_SnapshotRequest.Size(m)
}
func (m *SnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotRequest proto.InternalMessageInfo

type SnapshotReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotReply) Reset()         { *m = SnapshotReply{} }
func (m *SnapshotReply) String() string { return proto.CompactTextString(m) }
func (*SnapshotReply) ProtoMessage()    {}
func (*SnapshotReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{12}
}
func (m *SnapshotReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotReply.Unmarshal(m, b)
}
func (m *SnapshotReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotReply.Marshal(b, m, deterministic)
}
func (dst *SnapshotReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotReply.Merge(dst, src)
}
func (m *SnapshotReply) XXX_Size() int {
	return xxx_messageInfo_SnapshotReply.Size(m)
}
func (m *SnapshotReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotReply.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotReply proto.InternalMessageInfo

type Command struct {
	Op                   Command_Op `protobuf:"varint,1,opt,name=op,proto3,enum=diskqueue.Command_Op" json:"op,omitempty"`
	Topic                string     `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Data                 []byte     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	HashKey              []byte     `protobuf:"bytes,4,opt,name=hashKey,proto3" json:"hashKey,omitempty"`
	ReadPos              int64      `protobuf:"varint,5,opt,name=readPos,proto3" json:"readPos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_776e86b699c54ecd, []int{13}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (dst *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(dst, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetOp() Command_Op {
	if m != nil {
		return m.Op
	}
	return Command_PUSH
}

func (m *Command) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Command) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Command) GetHashKey() []byte {
	if m != nil {
		return m.HashKey
	}
	return nil
}

func (m *Command) GetReadPos() int64 {
	if m != nil {
		return m.ReadPos
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "diskqueue.Message")
	proto.RegisterType((*PushRequest)(nil), "diskqueue.PushRequest")
	proto.RegisterType((*PushReply)(nil), "diskqueue.PushReply")
	proto.RegisterType((*PopRequest)(nil), "diskqueue.PopRequest")
	proto.RegisterType((*PopReply)(nil), "diskqueue.PopReply")
	proto.RegisterType((*AckRequest)(nil), "diskqueue.AckRequest")
	proto.RegisterType((*AckReply)(nil), "diskqueue.AckReply")
	proto.RegisterType((*JoinRequest)(nil), "diskqueue.JoinRequest")
	proto.RegisterType((*JoinReply)(nil), "diskqueue.JoinReply")
	proto.RegisterType((*LeaveRequest)(nil), "diskqueue.LeaveRequest")
	proto.RegisterType((*LeaveReply)(nil), "diskqueue.LeaveReply")
	proto.RegisterType((*SnapshotRequest)(nil), "diskqueue.SnapshotRequest")
	proto.RegisterType((*SnapshotReply)(nil), "diskqueue.SnapshotReply")
	proto.RegisterType((*Command)(nil), "diskqueue.Command")
	proto.RegisterEnum("diskqueue.Command_Op", Command_Op_name, Command_Op_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ tr.Server
var _ tr.ClientConn
var _ tropt.CallOption

type DiskqueueGrpcClient interface {
	Push(ctx context.Context, in *PushRequest, opts ...tropt.CallOption) (*PushReply, error)
	Pop(ctx context.Context, in *PopRequest, opts ...tropt.CallOption) (*PopReply, error)
	Ack(ctx context.Context, in *AckRequest, opts ...tropt.CallOption) (*AckReply, error)
	Join(ctx context.Context, in *JoinRequest, opts ...tropt.CallOption) (*JoinReply, error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...tropt.CallOption) (*LeaveReply, error)
	Snapshot(ctx context.Context, in *SnapshotRequest, opts ...tropt.CallOption) (*SnapshotReply, error)
}

type diskqueueGrpcClient struct {
	cc tr.ClientConn
}

func NewDiskqueueGrpcClient(cc tr.ClientConn) DiskqueueGrpcClient {
	return &diskqueueGrpcClient{cc}
}

func (c *diskqueueGrpcClient) Push(ctx context.Context, in *PushRequest, opts ...tropt.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := c.cc.Invoke(ctx, "/diskqueue.Diskqueue/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueGrpcClient) Pop(ctx context.Context, in *PopRequest, opts ...tropt.CallOption) (*PopReply, error) {
	out := new(PopReply)
	err := c.cc.Invoke(ctx, "/diskqueue.Diskqueue/Pop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueGrpcClient) Ack(ctx context.Context, in *AckRequest, opts ...tropt.CallOption) (*AckReply, error) {
	out := new(AckReply)
	err := c.cc.Invoke(ctx, "/diskqueue.Diskqueue/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueGrpcClient) Join(ctx context.Context, in *JoinRequest, opts ...tropt.CallOption) (*JoinReply, error) {
	out := new(JoinReply)
	err := c.cc.Invoke(ctx, "/diskqueue.Diskqueue/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueGrpcClient) Leave(ctx context.Context, in *LeaveRequest, opts ...tropt.CallOption) (*LeaveReply, error) {
	out := new(LeaveReply)
	err := c.cc.Invoke(ctx, "/diskqueue.Diskqueue/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueGrpcClient) Snapshot(ctx context.Context, in *SnapshotRequest, opts ...tropt.CallOption) (*SnapshotReply, error) {
	out := new(SnapshotReply)
	err := c.cc.Invoke(ctx, "/diskqueue.Diskqueue/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type diskqueueGrpcServiceDesc struct {
	desc *grpc.ServiceDesc
}

func (d *diskqueueGrpcServiceDesc) Desc() interface{} {
	return d.desc
}

var DiskqueueGrpcServiceDesc = &diskqueueGrpcServiceDesc{&_Diskqueue_serviceDesc}

// Reference imports to suppress errors if they are not otherwise used.
var _ context1.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// DiskqueueClient is the client API for Diskqueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiskqueueClient interface {
	Push(ctx context1.Context, in *PushRequest, opts ...grpc1.CallOption) (*PushReply, error)
	Pop(ctx context1.Context, in *PopRequest, opts ...grpc1.CallOption) (*PopReply, error)
	Ack(ctx context1.Context, in *AckRequest, opts ...grpc1.CallOption) (*AckReply, error)
	Join(ctx context1.Context, in *JoinRequest, opts ...grpc1.CallOption) (*JoinReply, error)
	Leave(ctx context1.Context, in *LeaveRequest, opts ...grpc1.CallOption) (*LeaveReply, error)
	Snapshot(ctx context1.Context, in *SnapshotRequest, opts ...grpc1.CallOption) (*SnapshotReply, error)
}

type diskqueueClient struct {
	cc *grpc1.ClientConn
}

func NewDiskqueueClient(cc *grpc1.ClientConn) DiskqueueClient {
	return &diskqueueClient{cc}
}

func (c *diskqueueClient) Push(ctx context1.Context, in *PushRequest, opts ...grpc1.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := c.cc.Invoke(ctx, "/diskqueue.Diskqueue/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueClient) Pop(ctx context1.Context, in *PopRequest, opts ...grpc1.CallOption) (*PopReply, error) {
	out := new(PopReply)
	err := c.cc.Invoke(ctx, "/diskqueue.Diskqueue/Pop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueClient) Ack(ctx context1.Context, in *AckRequest, opts ...grpc1.CallOption) (*AckReply, error) {
	out := new(AckReply)
	err := c.cc.Invoke(ctx, "/diskqueue.Diskqueue/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueClient) Join(ctx context1.Context, in *JoinRequest, opts ...grpc1.CallOption) (*JoinReply, error) {
	out := new(JoinReply)
	err := c.cc.Invoke(ctx, "/diskqueue.Diskqueue/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueClient) Leave(ctx context1.Context, in *LeaveRequest, opts ...grpc1.CallOption) (*LeaveReply, error) {
	out := new(LeaveReply)
	err := c.cc.Invoke(ctx, "/diskqueue.Diskqueue/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueClient) Snapshot(ctx context1.Context, in *SnapshotRequest, opts ...grpc1.CallOption) (*SnapshotReply, error) {
	out := new(SnapshotReply)
	err := c.cc.Invoke(ctx, "/diskqueue.Diskqueue/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiskqueueServer is the server API for Diskqueue service.
type DiskqueueServer interface {
	Push(context1.Context, *PushRequest) (*PushReply, error)
	Pop(context1.Context, *PopRequest) (*PopReply, error)
	Ack(context1.Context, *AckRequest) (*AckReply, error)
	Join(context1.Context, *JoinRequest) (*JoinReply, error)
	Leave(context1.Context, *LeaveRequest) (*LeaveReply, error)
	Snapshot(context1.Context, *SnapshotRequest) (*SnapshotReply, error)
}

func RegisterDiskqueueServer(s *grpc1.Server, srv DiskqueueServer) {
	s.RegisterService(&_Diskqueue_serviceDesc, srv)
}

func _Diskqueue_Push_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskqueueServer).Push(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diskqueue.Diskqueue/Push",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(DiskqueueServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diskqueue_Pop_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskqueueServer).Pop(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diskqueue.Diskqueue/Pop",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(DiskqueueServer).Pop(ctx, req.(*PopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diskqueue_Ack_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskqueueServer).Ack(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diskqueue.Diskqueue/Ack",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(DiskqueueServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diskqueue_Join_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskqueueServer).Join(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diskqueue.Diskqueue/Join",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(DiskqueueServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diskqueue_Leave_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskqueueServer).Leave(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diskqueue.Diskqueue/Leave",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(DiskqueueServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diskqueue_Snapshot_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskqueueServer).Snapshot(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diskqueue.Diskqueue/Snapshot",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(DiskqueueServer).Snapshot(ctx, req.(*SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Diskqueue_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "diskqueue.Diskqueue",
	HandlerType: (*DiskqueueServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Diskqueue_Push_Handler,
		},
		{
			MethodName: "Pop",
			Handler:    _Diskqueue_Pop_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _Diskqueue_Ack_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Diskqueue_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Diskqueue_Leave_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _Diskqueue_Snapshot_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "diskqueue.proto",
}

func init() { proto.RegisterFile("diskqueue.proto", fileDescriptor_diskqueue_776e86b699c54ecd) }

var fileDescriptor_diskqueue_776e86b699c54ecd = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x1d, 0xa7, 0xb6, 0x27, 0xa1, 0x2d, 0x43, 0x5a, 0x2c, 0xc3, 0x21, 0xb2, 0x04, 0xca,
	0x01, 0xe5, 0x90, 0x4a, 0xa8, 0x48, 0x5c, 0x4c, 0x03, 0x22, 0x7c, 0x35, 0xda, 0x0a, 0xee, 0x4b,
	0xbc, 0x24, 0x56, 0x62, 0xef, 0xd6, 0x6b, 0x23, 0xe5, 0x37, 0xf1, 0xb7, 0xf8, 0x21, 0xc8, 0x6b,
	0x3b, 0xb6, 0xdb, 0xa8, 0x12, 0xb7, 0xcc, 0xdb, 0x79, 0x6f, 0x9e, 0x67, 0x9e, 0x02, 0x27, 0x41,
	0x28, 0x37, 0xb7, 0x19, 0xcb, 0xd8, 0x44, 0x24, 0x3c, 0xe5, 0x68, 0xef, 0x01, 0x8f, 0x81, 0xf9,
	0x95, 0x49, 0x49, 0x57, 0x0c, 0x8f, 0x41, 0x9f, 0xcf, 0x1c, 0x6d, 0xa4, 0x8d, 0x0d, 0xa2, 0xcf,
	0x67, 0x88, 0x60, 0x04, 0x34, 0xa5, 0x8e, 0x3e, 0xd2, 0xc6, 0x03, 0xa2, 0x7e, 0xa3, 0x03, 0xe6,
	0x9a, 0xca, 0xf5, 0x67, 0xb6, 0x73, 0xba, 0x0a, 0xae, 0x4a, 0x7c, 0x0e, 0x76, 0x1a, 0x46, 0x4c,
	0xa6, 0x34, 0x12, 0x8e, 0x31, 0xd2, 0xc6, 0x5d, 0x52, 0x03, 0x5e, 0x06, 0xfd, 0x45, 0x26, 0xd7,
	0x84, 0xdd, 0x66, 0x4c, 0xa6, 0x38, 0x84, 0x5e, 0xca, 0x45, 0xb8, 0x54, 0xd3, 0x6c, 0x52, 0x14,
	0xff, 0x39, 0xd0, 0x83, 0x41, 0xb8, 0x8a, 0x79, 0xc2, 0x3e, 0x84, 0xdb, 0x94, 0x25, 0x6a, 0xa6,
	0x45, 0x5a, 0x98, 0xd7, 0x07, 0xbb, 0x18, 0x2b, 0xb6, 0x3b, 0xef, 0x2d, 0xc0, 0x82, 0x8b, 0x87,
	0x2d, 0x38, 0x60, 0xc6, 0x8c, 0x05, 0xfe, 0x72, 0xa3, 0x5c, 0x58, 0xa4, 0x2a, 0xbd, 0x4b, 0xb0,
	0x14, 0x5b, 0x6c, 0x77, 0xf8, 0x0a, 0xcc, 0xa8, 0x58, 0x9a, 0x62, 0xf7, 0xa7, 0x38, 0xa9, 0x57,
	0x5c, 0xae, 0x93, 0x54, 0x2d, 0xde, 0x25, 0x80, 0xbf, 0xdc, 0x3c, 0x3c, 0x77, 0x08, 0xbd, 0x48,
	0xae, 0xe6, 0x33, 0x35, 0xd5, 0x20, 0x45, 0xe1, 0x01, 0x58, 0x8a, 0x99, 0xbb, 0xf7, 0xa1, 0xff,
	0x89, 0x87, 0x71, 0x25, 0xe3, 0x82, 0x95, 0xd0, 0x5f, 0xa9, 0x1f, 0x04, 0x49, 0xa9, 0xb4, 0xaf,
	0xf1, 0x1c, 0x8e, 0x62, 0x1e, 0xb0, 0x52, 0xcd, 0x26, 0x65, 0x95, 0x6f, 0xa3, 0x90, 0xc8, 0xf5,
	0x5e, 0xc2, 0xe0, 0x0b, 0xa3, 0xbf, 0x59, 0x25, 0x58, 0x93, 0xb4, 0x16, 0x69, 0x00, 0x50, 0xf6,
	0xe5, 0xac, 0xc7, 0x70, 0x72, 0x13, 0x53, 0x21, 0xd7, 0x3c, 0x2d, 0x89, 0xde, 0x09, 0x3c, 0xaa,
	0xa1, 0xbc, 0xe7, 0x8f, 0x06, 0xe6, 0x15, 0x8f, 0x22, 0x1a, 0x07, 0xf8, 0x02, 0x74, 0x2e, 0x94,
	0xe2, 0xf1, 0xf4, 0xac, 0xb1, 0xa4, 0xf2, 0x7d, 0x72, 0x2d, 0x88, 0xce, 0x45, 0xbd, 0x14, 0xfd,
	0x50, 0x1e, 0xba, 0x87, 0xf3, 0x60, 0xb4, 0xf3, 0xe0, 0x80, 0x99, 0x30, 0x1a, 0x2c, 0xb8, 0x74,
	0x7a, 0x2a, 0x7e, 0x55, 0xe9, 0x3d, 0x03, 0xfd, 0x5a, 0xa0, 0x05, 0xc6, 0xe2, 0xfb, 0xcd, 0xc7,
	0xd3, 0x0e, 0xf6, 0xc1, 0xf4, 0x67, 0x3f, 0xfc, 0x6f, 0x57, 0xef, 0x4f, 0xb5, 0xe9, 0x5f, 0x1d,
	0xec, 0x59, 0xe5, 0x0b, 0x5f, 0x83, 0x91, 0x07, 0x06, 0xcf, 0x1b, 0x5e, 0x1b, 0xc1, 0x75, 0x87,
	0xf7, 0xf0, 0xfc, 0x8b, 0x3b, 0x78, 0x01, 0xdd, 0x05, 0x17, 0xd8, 0xfc, 0xc4, 0x3a, 0x6b, 0xee,
	0x93, 0xbb, 0xf0, 0x9e, 0xe4, 0x2f, 0x37, 0x2d, 0x52, 0x1d, 0x94, 0x16, 0x69, 0x9f, 0x82, 0x4e,
	0xee, 0x30, 0x3f, 0x62, 0xcb, 0x61, 0x23, 0x18, 0x2d, 0x87, 0xf5, 0xb5, 0x3b, 0xf8, 0x06, 0x7a,
	0xea, 0x8e, 0xf8, 0xb4, 0xd1, 0xd0, 0x4c, 0x80, 0x7b, 0x76, 0xff, 0xa1, 0xa0, 0xbe, 0x03, 0xab,
	0xba, 0x30, 0xba, 0x8d, 0xa6, 0x3b, 0x49, 0x70, 0x9d, 0x83, 0x6f, 0x4a, 0xe3, 0xe7, 0x91, 0xfa,
	0xe7, 0xb9, 0xf8, 0x17, 0x00, 0x00, 0xff, 0xff, 0x82, 0x42, 0xb5, 0x2a, 0x8c, 0x04, 0x00, 0x00,
}
