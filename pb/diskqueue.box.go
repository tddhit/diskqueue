// Code generated by protoc-gen-box. DO NOT EDIT.
// source: diskqueue.proto

package diskqueuepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	tr "github.com/tddhit/box/transport"
	tropt "github.com/tddhit/box/transport/option"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import (
	context1 "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Command_Op int32

const (
	Command_PUSH    Command_Op = 0
	Command_ADVANCE Command_Op = 1
)

var Command_Op_name = map[int32]string{
	0: "PUSH",
	1: "ADVANCE",
}
var Command_Op_value = map[string]int32{
	"PUSH":    0,
	"ADVANCE": 1,
}

func (x Command_Op) String() string {
	return proto.EnumName(Command_Op_name, int32(x))
}
func (Command_Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{13, 0}
}

type Message struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	HashKey              []byte   `protobuf:"bytes,3,opt,name=hashKey,proto3" json:"hashKey,omitempty"`
	Timestamp            int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetHashKey() []byte {
	if m != nil {
		return m.HashKey
	}
	return nil
}

func (m *Message) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type PushReq struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	HashKey              []byte   `protobuf:"bytes,3,opt,name=hashKey,proto3" json:"hashKey,omitempty"`
	IgnoreFilter         bool     `protobuf:"varint,4,opt,name=ignoreFilter,proto3" json:"ignoreFilter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushReq) Reset()         { *m = PushReq{} }
func (m *PushReq) String() string { return proto.CompactTextString(m) }
func (*PushReq) ProtoMessage()    {}
func (*PushReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{1}
}
func (m *PushReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushReq.Unmarshal(m, b)
}
func (m *PushReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushReq.Marshal(b, m, deterministic)
}
func (dst *PushReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushReq.Merge(dst, src)
}
func (m *PushReq) XXX_Size() int {
	return xxx_messageInfo_PushReq.Size(m)
}
func (m *PushReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PushReq.DiscardUnknown(m)
}

var xxx_messageInfo_PushReq proto.InternalMessageInfo

func (m *PushReq) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PushReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PushReq) GetHashKey() []byte {
	if m != nil {
		return m.HashKey
	}
	return nil
}

func (m *PushReq) GetIgnoreFilter() bool {
	if m != nil {
		return m.IgnoreFilter
	}
	return false
}

type PushRsp struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushRsp) Reset()         { *m = PushRsp{} }
func (m *PushRsp) String() string { return proto.CompactTextString(m) }
func (*PushRsp) ProtoMessage()    {}
func (*PushRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{2}
}
func (m *PushRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushRsp.Unmarshal(m, b)
}
func (m *PushRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushRsp.Marshal(b, m, deterministic)
}
func (dst *PushRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRsp.Merge(dst, src)
}
func (m *PushRsp) XXX_Size() int {
	return xxx_messageInfo_PushRsp.Size(m)
}
func (m *PushRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PushRsp proto.InternalMessageInfo

func (m *PushRsp) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type PopReq struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Channel              string   `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	NeedAck              bool     `protobuf:"varint,3,opt,name=needAck,proto3" json:"needAck,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PopReq) Reset()         { *m = PopReq{} }
func (m *PopReq) String() string { return proto.CompactTextString(m) }
func (*PopReq) ProtoMessage()    {}
func (*PopReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{3}
}
func (m *PopReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PopReq.Unmarshal(m, b)
}
func (m *PopReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PopReq.Marshal(b, m, deterministic)
}
func (dst *PopReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PopReq.Merge(dst, src)
}
func (m *PopReq) XXX_Size() int {
	return xxx_messageInfo_PopReq.Size(m)
}
func (m *PopReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PopReq.DiscardUnknown(m)
}

var xxx_messageInfo_PopReq proto.InternalMessageInfo

func (m *PopReq) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PopReq) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *PopReq) GetNeedAck() bool {
	if m != nil {
		return m.NeedAck
	}
	return false
}

type PopRsp struct {
	Message              *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PopRsp) Reset()         { *m = PopRsp{} }
func (m *PopRsp) String() string { return proto.CompactTextString(m) }
func (*PopRsp) ProtoMessage()    {}
func (*PopRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{4}
}
func (m *PopRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PopRsp.Unmarshal(m, b)
}
func (m *PopRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PopRsp.Marshal(b, m, deterministic)
}
func (dst *PopRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PopRsp.Merge(dst, src)
}
func (m *PopRsp) XXX_Size() int {
	return xxx_messageInfo_PopRsp.Size(m)
}
func (m *PopRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PopRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PopRsp proto.InternalMessageInfo

func (m *PopRsp) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type AckReq struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	MsgID                uint64   `protobuf:"varint,2,opt,name=msgID,proto3" json:"msgID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckReq) Reset()         { *m = AckReq{} }
func (m *AckReq) String() string { return proto.CompactTextString(m) }
func (*AckReq) ProtoMessage()    {}
func (*AckReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{5}
}
func (m *AckReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckReq.Unmarshal(m, b)
}
func (m *AckReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckReq.Marshal(b, m, deterministic)
}
func (dst *AckReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckReq.Merge(dst, src)
}
func (m *AckReq) XXX_Size() int {
	return xxx_messageInfo_AckReq.Size(m)
}
func (m *AckReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AckReq.DiscardUnknown(m)
}

var xxx_messageInfo_AckReq proto.InternalMessageInfo

func (m *AckReq) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *AckReq) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

type AckRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckRsp) Reset()         { *m = AckRsp{} }
func (m *AckRsp) String() string { return proto.CompactTextString(m) }
func (*AckRsp) ProtoMessage()    {}
func (*AckRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{6}
}
func (m *AckRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckRsp.Unmarshal(m, b)
}
func (m *AckRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckRsp.Marshal(b, m, deterministic)
}
func (dst *AckRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckRsp.Merge(dst, src)
}
func (m *AckRsp) XXX_Size() int {
	return xxx_messageInfo_AckRsp.Size(m)
}
func (m *AckRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AckRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AckRsp proto.InternalMessageInfo

type JoinReq struct {
	RaftAddr             string   `protobuf:"bytes,1,opt,name=raftAddr,proto3" json:"raftAddr,omitempty"`
	NodeID               string   `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinReq) Reset()         { *m = JoinReq{} }
func (m *JoinReq) String() string { return proto.CompactTextString(m) }
func (*JoinReq) ProtoMessage()    {}
func (*JoinReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{7}
}
func (m *JoinReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinReq.Unmarshal(m, b)
}
func (m *JoinReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinReq.Marshal(b, m, deterministic)
}
func (dst *JoinReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinReq.Merge(dst, src)
}
func (m *JoinReq) XXX_Size() int {
	return xxx_messageInfo_JoinReq.Size(m)
}
func (m *JoinReq) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinReq.DiscardUnknown(m)
}

var xxx_messageInfo_JoinReq proto.InternalMessageInfo

func (m *JoinReq) GetRaftAddr() string {
	if m != nil {
		return m.RaftAddr
	}
	return ""
}

func (m *JoinReq) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type JoinRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinRsp) Reset()         { *m = JoinRsp{} }
func (m *JoinRsp) String() string { return proto.CompactTextString(m) }
func (*JoinRsp) ProtoMessage()    {}
func (*JoinRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{8}
}
func (m *JoinRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinRsp.Unmarshal(m, b)
}
func (m *JoinRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinRsp.Marshal(b, m, deterministic)
}
func (dst *JoinRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRsp.Merge(dst, src)
}
func (m *JoinRsp) XXX_Size() int {
	return xxx_messageInfo_JoinRsp.Size(m)
}
func (m *JoinRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRsp.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRsp proto.InternalMessageInfo

type LeaveReq struct {
	NodeID               string   `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaveReq) Reset()         { *m = LeaveReq{} }
func (m *LeaveReq) String() string { return proto.CompactTextString(m) }
func (*LeaveReq) ProtoMessage()    {}
func (*LeaveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{9}
}
func (m *LeaveReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaveReq.Unmarshal(m, b)
}
func (m *LeaveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaveReq.Marshal(b, m, deterministic)
}
func (dst *LeaveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveReq.Merge(dst, src)
}
func (m *LeaveReq) XXX_Size() int {
	return xxx_messageInfo_LeaveReq.Size(m)
}
func (m *LeaveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveReq.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveReq proto.InternalMessageInfo

func (m *LeaveReq) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type LeaveRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaveRsp) Reset()         { *m = LeaveRsp{} }
func (m *LeaveRsp) String() string { return proto.CompactTextString(m) }
func (*LeaveRsp) ProtoMessage()    {}
func (*LeaveRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{10}
}
func (m *LeaveRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaveRsp.Unmarshal(m, b)
}
func (m *LeaveRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaveRsp.Marshal(b, m, deterministic)
}
func (dst *LeaveRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveRsp.Merge(dst, src)
}
func (m *LeaveRsp) XXX_Size() int {
	return xxx_messageInfo_LeaveRsp.Size(m)
}
func (m *LeaveRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveRsp proto.InternalMessageInfo

type SnapshotReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotReq) Reset()         { *m = SnapshotReq{} }
func (m *SnapshotReq) String() string { return proto.CompactTextString(m) }
func (*SnapshotReq) ProtoMessage()    {}
func (*SnapshotReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{11}
}
func (m *SnapshotReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotReq.Unmarshal(m, b)
}
func (m *SnapshotReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotReq.Marshal(b, m, deterministic)
}
func (dst *SnapshotReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotReq.Merge(dst, src)
}
func (m *SnapshotReq) XXX_Size() int {
	return xxx_messageInfo_SnapshotReq.Size(m)
}
func (m *SnapshotReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotReq.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotReq proto.InternalMessageInfo

type SnapshotRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotRsp) Reset()         { *m = SnapshotRsp{} }
func (m *SnapshotRsp) String() string { return proto.CompactTextString(m) }
func (*SnapshotRsp) ProtoMessage()    {}
func (*SnapshotRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{12}
}
func (m *SnapshotRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotRsp.Unmarshal(m, b)
}
func (m *SnapshotRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotRsp.Marshal(b, m, deterministic)
}
func (dst *SnapshotRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotRsp.Merge(dst, src)
}
func (m *SnapshotRsp) XXX_Size() int {
	return xxx_messageInfo_SnapshotRsp.Size(m)
}
func (m *SnapshotRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotRsp proto.InternalMessageInfo

type Command struct {
	Op                   Command_Op `protobuf:"varint,1,opt,name=op,proto3,enum=diskqueuepb.Command_Op" json:"op,omitempty"`
	Topic                string     `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Channel              string     `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Data                 []byte     `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	HashKey              []byte     `protobuf:"bytes,5,opt,name=hashKey,proto3" json:"hashKey,omitempty"`
	NextPos              int64      `protobuf:"varint,6,opt,name=nextPos,proto3" json:"nextPos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{13}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (dst *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(dst, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetOp() Command_Op {
	if m != nil {
		return m.Op
	}
	return Command_PUSH
}

func (m *Command) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Command) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Command) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Command) GetHashKey() []byte {
	if m != nil {
		return m.HashKey
	}
	return nil
}

func (m *Command) GetNextPos() int64 {
	if m != nil {
		return m.NextPos
	}
	return 0
}

type GetStateReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateReq) Reset()         { *m = GetStateReq{} }
func (m *GetStateReq) String() string { return proto.CompactTextString(m) }
func (*GetStateReq) ProtoMessage()    {}
func (*GetStateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{14}
}
func (m *GetStateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStateReq.Unmarshal(m, b)
}
func (m *GetStateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStateReq.Marshal(b, m, deterministic)
}
func (dst *GetStateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateReq.Merge(dst, src)
}
func (m *GetStateReq) XXX_Size() int {
	return xxx_messageInfo_GetStateReq.Size(m)
}
func (m *GetStateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateReq proto.InternalMessageInfo

type GetStateRsp struct {
	State                uint32   `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateRsp) Reset()         { *m = GetStateRsp{} }
func (m *GetStateRsp) String() string { return proto.CompactTextString(m) }
func (*GetStateRsp) ProtoMessage()    {}
func (*GetStateRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{15}
}
func (m *GetStateRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStateRsp.Unmarshal(m, b)
}
func (m *GetStateRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStateRsp.Marshal(b, m, deterministic)
}
func (dst *GetStateRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateRsp.Merge(dst, src)
}
func (m *GetStateRsp) XXX_Size() int {
	return xxx_messageInfo_GetStateRsp.Size(m)
}
func (m *GetStateRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateRsp proto.InternalMessageInfo

func (m *GetStateRsp) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

type WatchStateReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchStateReq) Reset()         { *m = WatchStateReq{} }
func (m *WatchStateReq) String() string { return proto.CompactTextString(m) }
func (*WatchStateReq) ProtoMessage()    {}
func (*WatchStateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{16}
}
func (m *WatchStateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchStateReq.Unmarshal(m, b)
}
func (m *WatchStateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchStateReq.Marshal(b, m, deterministic)
}
func (dst *WatchStateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchStateReq.Merge(dst, src)
}
func (m *WatchStateReq) XXX_Size() int {
	return xxx_messageInfo_WatchStateReq.Size(m)
}
func (m *WatchStateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchStateReq.DiscardUnknown(m)
}

var xxx_messageInfo_WatchStateReq proto.InternalMessageInfo

type WatchStateRsp struct {
	State                uint32   `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchStateRsp) Reset()         { *m = WatchStateRsp{} }
func (m *WatchStateRsp) String() string { return proto.CompactTextString(m) }
func (*WatchStateRsp) ProtoMessage()    {}
func (*WatchStateRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{17}
}
func (m *WatchStateRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchStateRsp.Unmarshal(m, b)
}
func (m *WatchStateRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchStateRsp.Marshal(b, m, deterministic)
}
func (dst *WatchStateRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchStateRsp.Merge(dst, src)
}
func (m *WatchStateRsp) XXX_Size() int {
	return xxx_messageInfo_WatchStateRsp.Size(m)
}
func (m *WatchStateRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchStateRsp.DiscardUnknown(m)
}

var xxx_messageInfo_WatchStateRsp proto.InternalMessageInfo

func (m *WatchStateRsp) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

type Metadata struct {
	Topic                string              `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	WriteID              uint64              `protobuf:"varint,2,opt,name=writeID,proto3" json:"writeID,omitempty"`
	Channels             []*Metadata_Channel `protobuf:"bytes,3,rep,name=channels,proto3" json:"channels,omitempty"`
	Segments             []*Metadata_Segment `protobuf:"bytes,4,rep,name=segments,proto3" json:"segments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{18}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metadata.Unmarshal(m, b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
}
func (dst *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(dst, src)
}
func (m *Metadata) XXX_Size() int {
	return xxx_messageInfo_Metadata.Size(m)
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Metadata) GetWriteID() uint64 {
	if m != nil {
		return m.WriteID
	}
	return 0
}

func (m *Metadata) GetChannels() []*Metadata_Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *Metadata) GetSegments() []*Metadata_Segment {
	if m != nil {
		return m.Segments
	}
	return nil
}

type Metadata_Channel struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReadID               uint64   `protobuf:"varint,2,opt,name=readID,proto3" json:"readID,omitempty"`
	ReadPos              int64    `protobuf:"varint,3,opt,name=readPos,proto3" json:"readPos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata_Channel) Reset()         { *m = Metadata_Channel{} }
func (m *Metadata_Channel) String() string { return proto.CompactTextString(m) }
func (*Metadata_Channel) ProtoMessage()    {}
func (*Metadata_Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{18, 0}
}
func (m *Metadata_Channel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metadata_Channel.Unmarshal(m, b)
}
func (m *Metadata_Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metadata_Channel.Marshal(b, m, deterministic)
}
func (dst *Metadata_Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata_Channel.Merge(dst, src)
}
func (m *Metadata_Channel) XXX_Size() int {
	return xxx_messageInfo_Metadata_Channel.Size(m)
}
func (m *Metadata_Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata_Channel proto.InternalMessageInfo

func (m *Metadata_Channel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metadata_Channel) GetReadID() uint64 {
	if m != nil {
		return m.ReadID
	}
	return 0
}

func (m *Metadata_Channel) GetReadPos() int64 {
	if m != nil {
		return m.ReadPos
	}
	return 0
}

type Metadata_Segment struct {
	MinID                uint64   `protobuf:"varint,1,opt,name=minID,proto3" json:"minID,omitempty"`
	WriteID              uint64   `protobuf:"varint,2,opt,name=writeID,proto3" json:"writeID,omitempty"`
	WritePos             int64    `protobuf:"varint,3,opt,name=writePos,proto3" json:"writePos,omitempty"`
	CreateTime           int64    `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata_Segment) Reset()         { *m = Metadata_Segment{} }
func (m *Metadata_Segment) String() string { return proto.CompactTextString(m) }
func (*Metadata_Segment) ProtoMessage()    {}
func (*Metadata_Segment) Descriptor() ([]byte, []int) {
	return fileDescriptor_diskqueue_56ee372b9decfda0, []int{18, 1}
}
func (m *Metadata_Segment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metadata_Segment.Unmarshal(m, b)
}
func (m *Metadata_Segment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metadata_Segment.Marshal(b, m, deterministic)
}
func (dst *Metadata_Segment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata_Segment.Merge(dst, src)
}
func (m *Metadata_Segment) XXX_Size() int {
	return xxx_messageInfo_Metadata_Segment.Size(m)
}
func (m *Metadata_Segment) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata_Segment.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata_Segment proto.InternalMessageInfo

func (m *Metadata_Segment) GetMinID() uint64 {
	if m != nil {
		return m.MinID
	}
	return 0
}

func (m *Metadata_Segment) GetWriteID() uint64 {
	if m != nil {
		return m.WriteID
	}
	return 0
}

func (m *Metadata_Segment) GetWritePos() int64 {
	if m != nil {
		return m.WritePos
	}
	return 0
}

func (m *Metadata_Segment) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "diskqueuepb.Message")
	proto.RegisterType((*PushReq)(nil), "diskqueuepb.PushReq")
	proto.RegisterType((*PushRsp)(nil), "diskqueuepb.PushRsp")
	proto.RegisterType((*PopReq)(nil), "diskqueuepb.PopReq")
	proto.RegisterType((*PopRsp)(nil), "diskqueuepb.PopRsp")
	proto.RegisterType((*AckReq)(nil), "diskqueuepb.AckReq")
	proto.RegisterType((*AckRsp)(nil), "diskqueuepb.AckRsp")
	proto.RegisterType((*JoinReq)(nil), "diskqueuepb.JoinReq")
	proto.RegisterType((*JoinRsp)(nil), "diskqueuepb.JoinRsp")
	proto.RegisterType((*LeaveReq)(nil), "diskqueuepb.LeaveReq")
	proto.RegisterType((*LeaveRsp)(nil), "diskqueuepb.LeaveRsp")
	proto.RegisterType((*SnapshotReq)(nil), "diskqueuepb.SnapshotReq")
	proto.RegisterType((*SnapshotRsp)(nil), "diskqueuepb.SnapshotRsp")
	proto.RegisterType((*Command)(nil), "diskqueuepb.Command")
	proto.RegisterType((*GetStateReq)(nil), "diskqueuepb.GetStateReq")
	proto.RegisterType((*GetStateRsp)(nil), "diskqueuepb.GetStateRsp")
	proto.RegisterType((*WatchStateReq)(nil), "diskqueuepb.WatchStateReq")
	proto.RegisterType((*WatchStateRsp)(nil), "diskqueuepb.WatchStateRsp")
	proto.RegisterType((*Metadata)(nil), "diskqueuepb.Metadata")
	proto.RegisterType((*Metadata_Channel)(nil), "diskqueuepb.Metadata.Channel")
	proto.RegisterType((*Metadata_Segment)(nil), "diskqueuepb.Metadata.Segment")
	proto.RegisterEnum("diskqueuepb.Command_Op", Command_Op_name, Command_Op_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ tr.Server
var _ tr.ClientConn
var _ tropt.CallOption

type DiskqueueGrpcClient interface {
	Push(ctx context.Context, in *PushReq, opts ...tropt.CallOption) (*PushRsp, error)
	Pop(ctx context.Context, in *PopReq, opts ...tropt.CallOption) (*PopRsp, error)
	Ack(ctx context.Context, in *AckReq, opts ...tropt.CallOption) (*AckRsp, error)
	Join(ctx context.Context, in *JoinReq, opts ...tropt.CallOption) (*JoinRsp, error)
	Leave(ctx context.Context, in *LeaveReq, opts ...tropt.CallOption) (*LeaveRsp, error)
	Snapshot(ctx context.Context, in *SnapshotReq, opts ...tropt.CallOption) (*SnapshotRsp, error)
	GetState(ctx context.Context, in *GetStateReq, opts ...tropt.CallOption) (*GetStateRsp, error)
	WatchState(ctx context.Context, in *WatchStateReq, opts ...tropt.CallOption) (Diskqueue_WatchStateClient, error)
}

type diskqueueGrpcClient struct {
	cc tr.ClientConn
}

func NewDiskqueueGrpcClient(cc tr.ClientConn) DiskqueueGrpcClient {
	return &diskqueueGrpcClient{cc}
}

func (c *diskqueueGrpcClient) Push(ctx context.Context, in *PushReq, opts ...tropt.CallOption) (*PushRsp, error) {
	out := new(PushRsp)
	err := c.cc.Invoke(ctx, "/diskqueuepb.Diskqueue/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueGrpcClient) Pop(ctx context.Context, in *PopReq, opts ...tropt.CallOption) (*PopRsp, error) {
	out := new(PopRsp)
	err := c.cc.Invoke(ctx, "/diskqueuepb.Diskqueue/Pop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueGrpcClient) Ack(ctx context.Context, in *AckReq, opts ...tropt.CallOption) (*AckRsp, error) {
	out := new(AckRsp)
	err := c.cc.Invoke(ctx, "/diskqueuepb.Diskqueue/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueGrpcClient) Join(ctx context.Context, in *JoinReq, opts ...tropt.CallOption) (*JoinRsp, error) {
	out := new(JoinRsp)
	err := c.cc.Invoke(ctx, "/diskqueuepb.Diskqueue/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueGrpcClient) Leave(ctx context.Context, in *LeaveReq, opts ...tropt.CallOption) (*LeaveRsp, error) {
	out := new(LeaveRsp)
	err := c.cc.Invoke(ctx, "/diskqueuepb.Diskqueue/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueGrpcClient) Snapshot(ctx context.Context, in *SnapshotReq, opts ...tropt.CallOption) (*SnapshotRsp, error) {
	out := new(SnapshotRsp)
	err := c.cc.Invoke(ctx, "/diskqueuepb.Diskqueue/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueGrpcClient) GetState(ctx context.Context, in *GetStateReq, opts ...tropt.CallOption) (*GetStateRsp, error) {
	out := new(GetStateRsp)
	err := c.cc.Invoke(ctx, "/diskqueuepb.Diskqueue/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueGrpcClient) WatchState(ctx context.Context, in *WatchStateReq, opts ...tropt.CallOption) (Diskqueue_WatchStateClient, error) {
	stream, err := c.cc.NewStream(ctx, DiskqueueGrpcServiceDesc, 0, "/diskqueuepb.Diskqueue/WatchState", opts...)
	if err != nil {
		return nil, err
	}
	x := &diskqueueWatchStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type diskqueueGrpcServiceDesc struct {
	desc *grpc.ServiceDesc
}

func (d *diskqueueGrpcServiceDesc) Desc() interface{} {
	return d.desc
}

var DiskqueueGrpcServiceDesc = &diskqueueGrpcServiceDesc{&_Diskqueue_serviceDesc}

// Reference imports to suppress errors if they are not otherwise used.
var _ context1.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// DiskqueueClient is the client API for Diskqueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiskqueueClient interface {
	Push(ctx context1.Context, in *PushReq, opts ...grpc1.CallOption) (*PushRsp, error)
	Pop(ctx context1.Context, in *PopReq, opts ...grpc1.CallOption) (*PopRsp, error)
	Ack(ctx context1.Context, in *AckReq, opts ...grpc1.CallOption) (*AckRsp, error)
	Join(ctx context1.Context, in *JoinReq, opts ...grpc1.CallOption) (*JoinRsp, error)
	Leave(ctx context1.Context, in *LeaveReq, opts ...grpc1.CallOption) (*LeaveRsp, error)
	Snapshot(ctx context1.Context, in *SnapshotReq, opts ...grpc1.CallOption) (*SnapshotRsp, error)
	GetState(ctx context1.Context, in *GetStateReq, opts ...grpc1.CallOption) (*GetStateRsp, error)
	WatchState(ctx context1.Context, in *WatchStateReq, opts ...grpc1.CallOption) (Diskqueue_WatchStateClient, error)
}

type diskqueueClient struct {
	cc *grpc1.ClientConn
}

func NewDiskqueueClient(cc *grpc1.ClientConn) DiskqueueClient {
	return &diskqueueClient{cc}
}

func (c *diskqueueClient) Push(ctx context1.Context, in *PushReq, opts ...grpc1.CallOption) (*PushRsp, error) {
	out := new(PushRsp)
	err := c.cc.Invoke(ctx, "/diskqueuepb.Diskqueue/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueClient) Pop(ctx context1.Context, in *PopReq, opts ...grpc1.CallOption) (*PopRsp, error) {
	out := new(PopRsp)
	err := c.cc.Invoke(ctx, "/diskqueuepb.Diskqueue/Pop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueClient) Ack(ctx context1.Context, in *AckReq, opts ...grpc1.CallOption) (*AckRsp, error) {
	out := new(AckRsp)
	err := c.cc.Invoke(ctx, "/diskqueuepb.Diskqueue/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueClient) Join(ctx context1.Context, in *JoinReq, opts ...grpc1.CallOption) (*JoinRsp, error) {
	out := new(JoinRsp)
	err := c.cc.Invoke(ctx, "/diskqueuepb.Diskqueue/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueClient) Leave(ctx context1.Context, in *LeaveReq, opts ...grpc1.CallOption) (*LeaveRsp, error) {
	out := new(LeaveRsp)
	err := c.cc.Invoke(ctx, "/diskqueuepb.Diskqueue/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueClient) Snapshot(ctx context1.Context, in *SnapshotReq, opts ...grpc1.CallOption) (*SnapshotRsp, error) {
	out := new(SnapshotRsp)
	err := c.cc.Invoke(ctx, "/diskqueuepb.Diskqueue/Snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueClient) GetState(ctx context1.Context, in *GetStateReq, opts ...grpc1.CallOption) (*GetStateRsp, error) {
	out := new(GetStateRsp)
	err := c.cc.Invoke(ctx, "/diskqueuepb.Diskqueue/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskqueueClient) WatchState(ctx context1.Context, in *WatchStateReq, opts ...grpc1.CallOption) (Diskqueue_WatchStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Diskqueue_serviceDesc.Streams[0], "/diskqueuepb.Diskqueue/WatchState", opts...)
	if err != nil {
		return nil, err
	}
	x := &diskqueueWatchStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Diskqueue_WatchStateClient interface {
	Recv() (*WatchStateRsp, error)
	grpc1.ClientStream
}

type diskqueueWatchStateClient struct {
	grpc1.ClientStream
}

func (x *diskqueueWatchStateClient) Recv() (*WatchStateRsp, error) {
	m := new(WatchStateRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DiskqueueServer is the server API for Diskqueue service.
type DiskqueueServer interface {
	Push(context1.Context, *PushReq) (*PushRsp, error)
	Pop(context1.Context, *PopReq) (*PopRsp, error)
	Ack(context1.Context, *AckReq) (*AckRsp, error)
	Join(context1.Context, *JoinReq) (*JoinRsp, error)
	Leave(context1.Context, *LeaveReq) (*LeaveRsp, error)
	Snapshot(context1.Context, *SnapshotReq) (*SnapshotRsp, error)
	GetState(context1.Context, *GetStateReq) (*GetStateRsp, error)
	WatchState(*WatchStateReq, Diskqueue_WatchStateServer) error
}

func RegisterDiskqueueServer(s *grpc1.Server, srv DiskqueueServer) {
	s.RegisterService(&_Diskqueue_serviceDesc, srv)
}

func _Diskqueue_Push_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskqueueServer).Push(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diskqueuepb.Diskqueue/Push",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(DiskqueueServer).Push(ctx, req.(*PushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diskqueue_Pop_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskqueueServer).Pop(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diskqueuepb.Diskqueue/Pop",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(DiskqueueServer).Pop(ctx, req.(*PopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diskqueue_Ack_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskqueueServer).Ack(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diskqueuepb.Diskqueue/Ack",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(DiskqueueServer).Ack(ctx, req.(*AckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diskqueue_Join_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskqueueServer).Join(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diskqueuepb.Diskqueue/Join",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(DiskqueueServer).Join(ctx, req.(*JoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diskqueue_Leave_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskqueueServer).Leave(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diskqueuepb.Diskqueue/Leave",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(DiskqueueServer).Leave(ctx, req.(*LeaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diskqueue_Snapshot_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskqueueServer).Snapshot(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diskqueuepb.Diskqueue/Snapshot",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(DiskqueueServer).Snapshot(ctx, req.(*SnapshotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diskqueue_GetState_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskqueueServer).GetState(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diskqueuepb.Diskqueue/GetState",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(DiskqueueServer).GetState(ctx, req.(*GetStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diskqueue_WatchState_Handler(srv interface{}, stream grpc1.ServerStream) error {
	m := new(WatchStateReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiskqueueServer).WatchState(m, &diskqueueWatchStateServer{stream})
}

type Diskqueue_WatchStateServer interface {
	Send(*WatchStateRsp) error
	grpc1.ServerStream
}

type diskqueueWatchStateServer struct {
	grpc1.ServerStream
}

func (x *diskqueueWatchStateServer) Send(m *WatchStateRsp) error {
	return x.ServerStream.SendMsg(m)
}

var _Diskqueue_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "diskqueuepb.Diskqueue",
	HandlerType: (*DiskqueueServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Diskqueue_Push_Handler,
		},
		{
			MethodName: "Pop",
			Handler:    _Diskqueue_Pop_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _Diskqueue_Ack_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Diskqueue_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Diskqueue_Leave_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _Diskqueue_Snapshot_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Diskqueue_GetState_Handler,
		},
	},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "WatchState",
			Handler:       _Diskqueue_WatchState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "diskqueue.proto",
}

func init() { proto.RegisterFile("diskqueue.proto", fileDescriptor_diskqueue_56ee372b9decfda0) }

var fileDescriptor_diskqueue_56ee372b9decfda0 = []byte{
	// 727 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x5b, 0x8f, 0xd3, 0x38,
	0x14, 0x9e, 0x5c, 0xda, 0xa4, 0xa7, 0x73, 0x93, 0x77, 0x76, 0x37, 0x9b, 0xbd, 0xa8, 0xf2, 0x0a,
	0xd1, 0xa7, 0x0a, 0xca, 0x48, 0xc0, 0x03, 0x12, 0x55, 0x0b, 0xcc, 0x00, 0xc3, 0x54, 0x2e, 0x97,
	0x67, 0x4f, 0x63, 0xda, 0xa8, 0x93, 0xc4, 0x8d, 0x5d, 0x2e, 0xbf, 0x90, 0x3f, 0xc2, 0x8f, 0xe0,
	0x11, 0xc5, 0x71, 0xd2, 0xa6, 0xd3, 0x8c, 0xc4, 0x5b, 0xbe, 0xe3, 0xef, 0x7c, 0x3e, 0x3e, 0xb7,
	0xc0, 0x51, 0x10, 0x8a, 0xc5, 0x72, 0xc5, 0x56, 0xac, 0xc7, 0xd3, 0x44, 0x26, 0xa8, 0x5d, 0x1a,
	0xf8, 0x15, 0x66, 0xe0, 0x5c, 0x30, 0x21, 0xe8, 0x8c, 0xa1, 0x43, 0x30, 0xcf, 0x47, 0x9e, 0xd1,
	0x31, 0xba, 0x36, 0x31, 0xcf, 0x47, 0x08, 0x81, 0x1d, 0x50, 0x49, 0x3d, 0xb3, 0x63, 0x74, 0xf7,
	0x89, 0xfa, 0x46, 0x1e, 0x38, 0x73, 0x2a, 0xe6, 0xaf, 0xd8, 0x57, 0xcf, 0x52, 0xe6, 0x02, 0xa2,
	0x7f, 0xa0, 0x25, 0xc3, 0x88, 0x09, 0x49, 0x23, 0xee, 0xd9, 0x1d, 0xa3, 0x6b, 0x91, 0xb5, 0x01,
	0x2f, 0xc1, 0x19, 0xaf, 0xc4, 0x9c, 0xb0, 0x25, 0x3a, 0x81, 0x86, 0x4c, 0x78, 0x38, 0x55, 0x37,
	0xb5, 0x48, 0x0e, 0x7e, 0xf1, 0x32, 0x0c, 0xfb, 0xe1, 0x2c, 0x4e, 0x52, 0xf6, 0x3c, 0xbc, 0x96,
	0x2c, 0x55, 0xf7, 0xb9, 0xa4, 0x62, 0xc3, 0x7f, 0xe9, 0x2b, 0x05, 0xdf, 0x7e, 0x19, 0x26, 0xd0,
	0x1c, 0x27, 0xbc, 0x3e, 0x18, 0x0f, 0x9c, 0xe9, 0x9c, 0xc6, 0x31, 0xbb, 0x56, 0xf1, 0xb4, 0x48,
	0x01, 0xb3, 0x93, 0x98, 0xb1, 0x60, 0x30, 0x5d, 0xa8, 0x90, 0x5c, 0x52, 0x40, 0xfc, 0x28, 0xd7,
	0x14, 0x1c, 0xf5, 0xc0, 0x89, 0xf2, 0x94, 0x2a, 0xd5, 0x76, 0xff, 0xa4, 0xb7, 0x91, 0xf1, 0x9e,
	0x4e, 0x37, 0x29, 0x48, 0xf8, 0x14, 0x9a, 0x83, 0xe9, 0xa2, 0x3e, 0x9a, 0x13, 0x68, 0x44, 0x62,
	0x76, 0x3e, 0x52, 0xb1, 0xd8, 0x24, 0x07, 0xd8, 0xcd, 0xbd, 0x04, 0xc7, 0x4f, 0xc0, 0x79, 0x99,
	0x84, 0x71, 0x26, 0xe0, 0x83, 0x9b, 0xd2, 0x8f, 0x72, 0x10, 0x04, 0xa9, 0xd6, 0x28, 0x31, 0xfa,
	0x03, 0x9a, 0x71, 0x12, 0x30, 0xad, 0xd3, 0x22, 0x1a, 0xe1, 0x96, 0x76, 0x17, 0x1c, 0x63, 0x70,
	0x5f, 0x33, 0xfa, 0x89, 0x65, 0x52, 0x6b, 0xba, 0x51, 0xa1, 0x43, 0xc1, 0x11, 0x1c, 0x1f, 0x40,
	0x7b, 0x12, 0x53, 0x2e, 0xe6, 0x89, 0x24, 0x6c, 0x59, 0x81, 0x82, 0xe3, 0x6f, 0x06, 0x38, 0xc3,
	0x24, 0x8a, 0x68, 0x1c, 0xa0, 0xbb, 0x60, 0x26, 0x5c, 0x29, 0x1d, 0xf6, 0xff, 0xac, 0xa4, 0x43,
	0x33, 0x7a, 0x97, 0x9c, 0x98, 0x09, 0x5f, 0xa7, 0xc0, 0xac, 0x29, 0x88, 0x55, 0x2d, 0x48, 0xd1,
	0x37, 0xf6, 0xee, 0xbe, 0x69, 0x54, 0xfb, 0x46, 0x95, 0xef, 0x8b, 0x1c, 0x27, 0xc2, 0x6b, 0xaa,
	0x16, 0x2d, 0x20, 0xfe, 0x1b, 0xcc, 0x4b, 0x8e, 0x5c, 0xb0, 0xc7, 0xef, 0x26, 0x67, 0xc7, 0x7b,
	0xa8, 0x0d, 0xce, 0x60, 0xf4, 0x7e, 0xf0, 0x66, 0xf8, 0xec, 0xd8, 0xc8, 0x1e, 0xf6, 0x82, 0xc9,
	0x89, 0xa4, 0x32, 0x4b, 0x0d, 0xfe, 0x7f, 0x03, 0x0a, 0x15, 0xb2, 0xc8, 0xbe, 0xd5, 0xf3, 0x0e,
	0x48, 0x0e, 0xf0, 0x11, 0x1c, 0x7c, 0xa0, 0x72, 0x3a, 0x2f, 0xbd, 0xee, 0x54, 0x0c, 0xb5, 0x7e,
	0x3f, 0x4c, 0x70, 0x2f, 0x98, 0xa4, 0xea, 0x25, 0xb5, 0xed, 0xf9, 0x39, 0x0d, 0x25, 0x2b, 0x5b,
	0xa2, 0x80, 0xe8, 0x31, 0xb8, 0x3a, 0x31, 0xc2, 0xb3, 0x3a, 0x56, 0xb7, 0xdd, 0xff, 0x77, 0xab,
	0xf7, 0x72, 0xe1, 0xde, 0x30, 0x67, 0x91, 0x92, 0x9e, 0xb9, 0x0a, 0x36, 0x8b, 0x58, 0x2c, 0x85,
	0x67, 0xdf, 0xe6, 0x3a, 0xc9, 0x59, 0xa4, 0xa4, 0xfb, 0x97, 0xe0, 0x0c, 0xd7, 0xe5, 0x88, 0x69,
	0xc4, 0x74, 0xbc, 0xea, 0x3b, 0xeb, 0xa4, 0x94, 0xd1, 0xa0, 0x8c, 0x56, 0xa3, 0xec, 0x19, 0xd9,
	0x57, 0x56, 0x0c, 0x2b, 0x2f, 0x86, 0x86, 0xfe, 0x0a, 0x1c, 0x7d, 0x8b, 0x6a, 0xfe, 0x30, 0x2e,
	0xa7, 0x37, 0x07, 0xb7, 0x64, 0xc0, 0x07, 0x57, 0x7d, 0xae, 0x55, 0x4b, 0x8c, 0xfe, 0x03, 0x98,
	0xa6, 0x8c, 0x4a, 0xf6, 0x36, 0x8c, 0x98, 0xde, 0x51, 0x1b, 0x96, 0xfe, 0x77, 0x0b, 0x5a, 0xa3,
	0xe2, 0xc9, 0xe8, 0x14, 0xec, 0x6c, 0x7f, 0xa0, 0xea, 0xf4, 0xea, 0x2d, 0xe6, 0xef, 0xb0, 0x0a,
	0x8e, 0xf7, 0xd0, 0x7d, 0xb0, 0xc6, 0x09, 0x47, 0xbf, 0x55, 0x8f, 0xd5, 0xb2, 0xf1, 0x6f, 0x1a,
	0x0b, 0x97, 0xc1, 0x74, 0xb1, 0xe5, 0x92, 0x6f, 0x04, 0xff, 0xa6, 0x51, 0xb9, 0x9c, 0x82, 0x9d,
	0xcd, 0xec, 0x56, 0x6c, 0x7a, 0x0b, 0xf8, 0x3b, 0xac, 0xca, 0xeb, 0x21, 0x34, 0xd4, 0xe8, 0xa2,
	0xdf, 0x2b, 0x84, 0x62, 0xe4, 0xfd, 0x5d, 0x66, 0xe5, 0xf8, 0x14, 0xdc, 0x62, 0xb0, 0x91, 0x57,
	0x21, 0x6d, 0x8c, 0xbf, 0x5f, 0x73, 0x52, 0x28, 0x14, 0x23, 0xb3, 0xa5, 0xb0, 0x31, 0x58, 0x7e,
	0xcd, 0x89, 0x52, 0x38, 0x03, 0x58, 0x8f, 0x0f, 0xf2, 0x2b, 0xcc, 0xca, 0xa0, 0xf9, 0xb5, 0x67,
	0x99, 0xce, 0x3d, 0xe3, 0xaa, 0xa9, 0x7e, 0x83, 0x0f, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x66,
	0x76, 0x10, 0x9c, 0x19, 0x07, 0x00, 0x00,
}
