syntax = "proto3";

package diskqueue;

service Diskqueue {
    rpc Push        (PushRequest)               returns (PushReply)                 {}
    rpc Pop         (PopRequest)                returns (PopReply)                  {}
    rpc Ack         (AckRequest)                returns (AckReply)                  {}
    rpc Join        (JoinRequest)               returns (JoinReply)                 {}
    rpc Leave       (LeaveRequest)              returns (LeaveReply)                {}
    rpc Snapshot    (SnapshotRequest)           returns (SnapshotReply)             {}
    //rpc KeepAlive   (stream KeepAliveRequest)   returns (stream KeepAliveReply)     {}
    rpc GetState    (GetStateRequest)           returns (GetStateReply)             {}
    rpc WatchState  (WatchStateRequest)         returns (stream WatchStateReply)    {}
}

message Message {
    uint64  ID   = 1;
    bytes   data = 2;
    bytes   hashKey = 3;
    int64   timestamp = 4;
}

message PushRequest {
    string topic = 1;
    bytes  data  = 2; 
    bytes  hashKey = 3;
    bool   ignoreFilter = 4;
}

message PushReply {
}

message PopRequest {
    string topic = 1;
    bool needAck = 2;
}

message PopReply {
    Message message = 1;
}

message AckRequest {
    string topic = 1;
    uint64 msgID = 2;
}

message AckReply {
}

message JoinRequest {
    string raftAddr = 1;
    string nodeID = 2;
}

message JoinReply {

}

message LeaveRequest {
    string nodeID = 1;
}

message LeaveReply {
}

message SnapshotRequest {
}

message SnapshotReply {
}

message Command {
    enum Op {
        PUSH = 0;          
        ADVANCE = 1;
    }
    Op op = 1;
    string topic = 2;
    bytes data = 3;
    bytes hashKey = 4;
    int64 readPos = 5;
}

message KeepAliveRequest {
}

message KeepAliveReply {
}

message GetStateRequest {
}

message GetStateReply {
    uint32 state = 1;
}

message WatchStateRequest {
}

message WatchStateReply {
    uint32 state = 1;
}
