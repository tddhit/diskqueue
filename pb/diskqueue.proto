syntax = "proto3";

package diskqueuepb;

service Diskqueue {
    rpc Push        (PushReq)        returns (PushRsp)                 {}
    rpc Pop         (PopReq)         returns (PopRsp)                  {}
    rpc Ack         (AckReq)         returns (AckRsp)                  {}
    rpc Join        (JoinReq)        returns (JoinRsp)                 {}
    rpc Leave       (LeaveReq)       returns (LeaveRsp)                {}
    rpc Snapshot    (SnapshotReq)    returns (SnapshotRsp)             {}
    rpc GetState    (GetStateReq)    returns (GetStateRsp)             {}
    rpc WatchState  (WatchStateReq)  returns (stream WatchStateRsp)    {}
}

message Message {
    uint64  ID   = 1;
    bytes   data = 2;
    bytes   hashKey = 3;
    int64   timestamp = 4;
}

message PushReq {
    string topic = 1;
    bytes  data  = 2; 
    bytes  hashKey = 3;
    bool   ignoreFilter = 4;
}

message PushRsp {
    uint64 ID = 1;
}

message PopReq {
    string topic = 1;
    string channel = 2;
    bool needAck = 3;
}

message PopRsp {
    Message message = 1;
}

message AckReq {
    string topic = 1;
    uint64 msgID = 2;
}

message AckRsp {
}

message JoinReq {
    string raftAddr = 1;
    string nodeID = 2;
}

message JoinRsp {

}

message LeaveReq {
    string nodeID = 1;
}

message LeaveRsp {
}

message SnapshotReq {
}

message SnapshotRsp {
}

message Command {
    enum Op {
        PUSH = 0;          
        ADVANCE = 1;
    }
    Op op = 1;
    string topic = 2;
    string channel = 3;
    bytes data = 4;
    bytes hashKey = 5;
    int64 nextPos = 6;
}

message GetStateReq {
}

message GetStateRsp {
    uint32 state = 1;
}

message WatchStateReq {
}

message WatchStateRsp {
    uint32 state = 1;
}

message Metadata {
    message Channel {
        string name = 1;
        uint64 readID = 2;
        int64 readPos = 3;
    }
    message Segment {
        uint64 minID = 1;
        uint64 writeID = 2;
        int64 writePos = 3;
        int64 createTime = 4;
    }
    string topic = 1; 
    uint64 writeID = 2; 
    repeated Channel channels = 3;
    repeated Segment segments = 4;
}
